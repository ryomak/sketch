---
import { BaseUrl } from "../consts";
import { artworks, getArtWasmName } from "../data/artworks";
---
<div class="art-gallery">
  {artworks.map((artwork) => (
    <div class="artwork-card">
      <a href={`${BaseUrl}/artwork/${getArtWasmName(artwork)}`}>
        <div class="artwork-image">
          <canvas class="artwork-preview" id={`canvas-${getArtWasmName(artwork)}`}></canvas>
        </div>
        <div class="artwork-info" style="display: none;">
          <h2>{artwork.title}</h2>
          <p>{artwork.description}</p>
        </div>
      </a>
    </div>
  ))}
</div>

<script define:vars={{ BaseUrl, artworks }}>
  // WebAssembly loading script (unchanged)
  const loadArtwork = async (art) => {
    const go = new Go();
    const result = await WebAssembly.instantiateStreaming(fetch(`${BaseUrl}/wasm/${art.code}_${art.name}.wasm`), go.importObject);
    await go.run(result.instance);
  };
  const loadAllArtworks = artworks.map(loadArtwork)
  Promise.all(loadAllArtworks)
</script>

<script define:vars={{ artworks }}>
  document.addEventListener('DOMContentLoaded', async () => {
    const sleep = (ms) => new Promise((res) => setTimeout(res, ms));
    const loadArtwork = async (a) => {
      const artParamName = `${a.code}_${a.name}`
      const canvasId = `canvas-${artParamName}`;
      const canvasElement = document.getElementById(canvasId);
      if (canvasElement) {
        canvasElement.width = 300;
        canvasElement.height = 300;
        
        await sleep(300)
        const art = eval(artParamName);
        art.generate(canvasId);
      } else {
        console.error('Canvas element not found or generateArt function not available.');
      }
    }
    artworks.forEach(async (preview) => {
      await loadArtwork(preview)
    });

    // Masonry layout
    const gallery = document.querySelector('.art-gallery');
    const cards = document.querySelectorAll('.artwork-card');
    let columns = [];

    function createColumns() {
      gallery.innerHTML = '';
      columns = [];
      const columnCount = window.innerWidth > 1200 ? 4 : window.innerWidth > 900 ? 3 : window.innerWidth > 600 ? 2 : 1;
      
      for (let i = 0; i < columnCount; i++) {
        const column = document.createElement('div');
        column.classList.add('gallery-column');
        gallery.appendChild(column);
        columns.push(column);
      }
    }

    function distributeCards() {
      cards.forEach((card, index) => {
        columns[index % columns.length].appendChild(card);
      });
    }

    function initMasonry() {
      createColumns();
      distributeCards();
    }

    initMasonry();
    window.addEventListener('resize', initMasonry);
  });
</script>

<style>
  .art-gallery {
    display: flex;
    gap: 16px;
    padding: 16px;
  }

  .gallery-column {
    display: flex;
    flex-direction: column;
    gap: 16px;
    flex: 1;
  }

  .artwork-card {
    break-inside: avoid;
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  .artwork-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
  }

  .artwork-card a {
    text-decoration: none;
    color: inherit;
  }

  .artwork-image {
    position: relative;
    overflow: hidden;
  }

  .artwork-preview {
    width: 100%;
    height: auto;
    display: block;
  }

  .artwork-info {
    padding: 16px;
  }

  .artwork-info h2 {
    font-size: 18px;
    margin: 0 0 8px;
    color: #333;
  }

  .artwork-info p {
    font-size: 14px;
    color: #666;
    margin: 0;
  }

  @media (max-width: 600px) {
    .art-gallery {
      flex-direction: column;
    }
  }
</style>