---
import type { Artwork } from '../data/artworks';
import { BaseUrl } from '../consts';
import { readGoFile } from '../utils/fileReader';
import { getArtWasmName } from '../data/artworks'

interface Props {
  artwork: Artwork;
}

const { artwork } = Astro.props;


const rawCode = await readGoFile(artwork.name);
const wasmFilePath = `${BaseUrl}/wasm/${artwork.code}_${artwork.name}.wasm`

---

<div class="artwork-detail">
  <div class="artwork-container">
    <div class="canvas-container">
      <canvas class="artwork-canvas" id={`canvas-detail`}></canvas>
      <button id="generate-button">生成</button>
    </div>
	<div>
    	<h3>Goコード</h3>
		<div class="go-code">
  		    <pre><code>{rawCode}</code></pre>
 	    </div>
	</div>
      </div>
  <div class="artwork-info">
    <h1 id="title">{artwork.title}</h1>
    <p id="description">{artwork.description}</p>
  </div>
</div>

<script define:vars={{ wasmFilePath }}>
	async function initWasm() {
		if (typeof Go !== 'undefined') {
			const go = new Go();
			const result = await WebAssembly.instantiateStreaming(fetch(wasmFilePath), go.importObject);
			const inst = result.instance;
			await go.run(inst);
		} else {
			console.error('Go is not defined. Make sure wasm_exec.js is loaded correctly.');
		}
	}
	initWasm();
</script>

<script define:vars={{ artwork, BaseUrl, artParamName: getArtWasmName(artwork) }}>
	
  document.addEventListener('DOMContentLoaded', async () => {
	const sleep = (ms) => new Promise((res) => setTimeout(res, ms));

	// GoのLoadをまつ
	await sleep(1000)
	art = eval(artParamName);

	
    const generateButton = document.getElementById('generate-button');
	document.getElementById('title').innerText = art.title
	document.getElementById('description').innerText = art.description

    generateButton.addEventListener('click', ()=>{
		const canvasId = `canvas-detail`;
		const canvasElement = document.getElementById(canvasId);

		if (canvasElement) {
			// キャンバスのサイズを設定
			canvasElement.width = window.innerWidth > 400 ? 400:  window.innerWidth > 400;
			canvasElement.height = canvasElement.width;
			
			// Go側で定義した関数を呼び出し、canvasIdを渡す
			art.generate(canvasId);
		} else {
			console.error('Canvas element not found or generateArt function not available.');
		}
	});

	generateButton.click();
  });
</script>
<style>
:root {
  --primary-color: #00ffff;
  --secondary-color: #ff00ff;
  --bg-color: #0a0a0a;
  --text-color: #ffffff;
}

body {
  background-color: var(--bg-color);
  color: var(--text-color);
  font-family: 'Roboto', sans-serif;
}

.artwork-detail {
  max-width: 1200px;
  width: 95%;
  margin: 2rem auto;
  padding: 2rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 20px;
  box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
  backdrop-filter: blur(10px);
}

.artwork-container {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.canvas-container {
  position: relative;
  width: 100%;
  padding-bottom: 100%;
  overflow: hidden;
  border-radius: 15px;
  box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
}

.artwork-canvas {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

#generate-button {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  padding: 0.8rem 2rem;
  background-color: rgba(0, 255, 255, 0.2);
  color: var(--primary-color);
  border: 2px solid var(--primary-color);
  border-radius: 30px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

#generate-button:hover {
  background-color: var(--primary-color);
  color: var(--bg-color);
  box-shadow: 0 0 20px var(--primary-color);
}

.go-code {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 15px;
  padding: 1.5rem;
  overflow-x: auto;
  border: 1px solid var(--primary-color);
}

.go-code pre {
  margin: 0;
}

.go-code code {
  color: var(--primary-color);
  font-family: 'Courier New', monospace;
  font-size: 0.9rem;
}

.artwork-info {
  text-align: center;
  padding: 2rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 15px;
  box-shadow: 0 0 20px rgba(255, 0, 255, 0.2);
}

.artwork-info h1 {
  font-size: 2.5rem;
  margin-bottom: 1rem;
  color: var(--primary-color);
  text-shadow: 0 0 10px var(--primary-color);
}

.artwork-info p {
  font-size: 1.1rem;
  color: var(--text-color);
  max-width: 800px;
  margin: 0 auto;
  line-height: 1.6;
}

@media (min-width: 768px) {
  .artwork-container {
    flex-direction: row;
  }

  .canvas-container {
    flex: 1;
    padding-bottom: 50%;
  }

  .go-code {
    flex: 1;
    max-height: 400px;
  }
}

@keyframes glow {
  0% {
    box-shadow: 0 0 20px var(--primary-color);
  }
  50% {
    box-shadow: 0 0 30px var(--secondary-color);
  }
  100% {
    box-shadow: 0 0 20px var(--primary-color);
  }
}

.artwork-detail {
  animation: glow 5s infinite alternate;
}
</style>